from tkinter import * # python da GUI uygulamaları oluşturmak için kullanılan kütüphanedir.
import random  # Rastgele sayı üretmek için kullanılan kütüphanedir , yemeklerin rastgele yerlerde oluşmasını sağlayacak.

GAME_WIDTH = 700
GAME_HEIGHT = 700
SPEED = 100 # hız eşitliği azaldıkça hızlanıyor
SPACE_SIZE = 40 # yılan ve yiyeceklerin her bir parçasının boyutu
BODY_PARTS = 3 # yılanın başlangıçta kaç parçası var
SNAKE_COLOR = "#0000FF"
FOOD_COLOR = "#FF0000"
BACKGROUND_COLOR = "#000000"

# her bir yiyecek veya yılan parçası 50x50 piksel (SPACE_SIZE = 50).
#Konumlar, oyun alanının genişliği ve yüksekliği içinde, 50'lik adımlarla
# yerleştirilecek. Bu, yiyeceğin yılanın hareket ettiği ızgarada (grid) 
# uyumlu bir yerde oluşmasını sağlar.



class Snake:
    def __init__(self):
        self.body_size = BODY_PARTS
        self.coordinates = []
        self.squares = []

        for i in range(0,BODY_PARTS):
            self.coordinates.append([0,0])

        for x , y in self.coordinates:
            square = canvas.create_rectangle(x,y, x + SPACE_SIZE, y + SPACE_SIZE, fill = SNAKE_COLOR, tag = "snake")    
            self.squares.append(square)


class Food:
    #__init__: Bu, sınıfın her oluşturulduğunda çalıştırılan kurucu fonksiyonudur.
    def __init__(self):
        x = random.randint(0, int(GAME_WIDTH / SPACE_SIZE) - 1) * SPACE_SIZE
        y = random.randint(0, int(GAME_HEIGHT / SPACE_SIZE) - 1) * SPACE_SIZE
        self.coordinates = [x, y]
        canvas.create_oval(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=FOOD_COLOR, tag="food")

                        
def next_turn(snake, food):
    x,y = snake.coordinates[0]

    if direction == "up":
        y -= SPACE_SIZE
    
    elif direction == "down":
        y += SPACE_SIZE

    elif direction == "left":
        x -= SPACE_SIZE

    elif direction == "right":
        x += SPACE_SIZE

    snake.coordinates.insert(0,(x,y))

    square = canvas.create_rectangle(x,y, x + SPACE_SIZE,y + SPACE_SIZE, fill = SNAKE_COLOR)
    snake.squares.insert(0, square)

    if x == food.coordinates[0] and y == food.coordinates[1]:

        global score 

        score += 1 

        label.config(text="Score:{}".format(score))
        canvas.delete("food")

        food = Food()

    else:
        del  snake.coordinates[-1]

        canvas.delete(snake.squares[-1])

        del snake.squares[-1]

    if check_collisions(snake):
        game_over()

    else:
         window.after(SPEED,next_turn,snake,food )    


def change_direction(new_direction):
    # yılanın yönünü değiştirmek için kullanılır.
    global direction

    if new_direction == 'left':
        if direction != 'right':
            direction = new_direction
    elif new_direction == 'right':
        if direction != 'left':
            direction = new_direction
    elif new_direction == 'up':
        if direction != 'down':
            direction = new_direction
    elif new_direction == 'down':
        if direction != 'up':
            direction = new_direction

def check_collisions(snake):
    # yılanın bir şeye duvara ya da kendi vücuduna çarpıp çarpmadığını kontrol eder.
    x , y = snake.coordinates[0]

    if x < 0 or x >= GAME_WIDTH:
        print("GAME OVER!")
        return True
 
    elif y < 0 or y >= GAME_HEIGHT:
         print("GAME OVER!")
         return True
    
    for body_part in snake.coordinates[1:]:
        if x == body_part[0] and y == body_part[1]:
            print("GAME OVER !")
            return True 
        
    return False 
def game_over():
    canvas.delete(ALL)
    canvas.create_text(canvas.winfo_width()/2, canvas.winfo_height()/2, font = ('consolas',79), text="GAME OVER", fill="red", tag="gameover")


# TKİNTER PENCERESİ OLUŞTURMA:
window= Tk()
window.title("Snake game")
window.resizable(False,False)


score = 0
direction = 'down'
#Label=skoru ekranda göstermek için etiket oluşturur.
label = Label(window , text="Score :{}".format(score), font =('consolas',40))
label.pack()

#Canvas = oyun alanını yılan ve yemeklerin çizileceği bölgeyi oluşturur.
canvas = Canvas(window, bg= BACKGROUND_COLOR ,height =GAME_HEIGHT,width=GAME_WIDTH)
canvas.pack()
#oyun ekranı açıldığında ekranın ortasında görünmesini istiyoruz:

window.update()

window_width = window.winfo_width()
window_height = window.winfo_height()
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()

x = (screen_width/2) - (window_width/2)
y = (screen_height/2) - (window_height/2)

window.geometry(f"{int(window_width)}x{int( window_height)}+{int(x)}+{int(y)}")

window.bind('<Left>', lambda event: change_direction('left'))
window.bind('<Right>', lambda event: change_direction('right'))
window.bind('<Up>', lambda event: change_direction('up'))
window.bind('<Down>', lambda event: change_direction('down'))

snake = Snake()
food = Food()

next_turn(snake,food)

window.mainloop() # Pencereyi sürekli açık tutar ve oyun devam ederken yapılan güncellemeleri takip eder.
